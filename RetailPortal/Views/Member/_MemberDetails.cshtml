@model List<RetailPortal.Models.Members>

<style>
    select {
        width: 100%;
        padding: 8px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        background-color: #fff;
        font-size: 16px;
        color: #495057;
        box-shadow: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="gray" d="M7 10l5 5 5-5z"/></svg>');
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 16px;
        cursor: pointer;
    }

        select:focus {
            border-color: #80bdff;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

    .card-body {
        width: 100%;
        overflow-x: auto; /* Ensure the content can scroll horizontally if it overflows */
    }

    #memberTable {
        width: 100%;
        table-layout: auto; /* Distribute the columns based on content */
        border-collapse: collapse;
    }

    th, td {
        white-space: nowrap;
        padding: 8px 10px;
        text-align: center; /* Center align the text */
        vertical-align: middle;
        border: 1px solid #ddd; /* Add borders for clearer separation */
        overflow: hidden; /* Prevent content overflow */
        text-overflow: ellipsis; /* Add ellipsis for overflowed content */
    }

    th {
        background-color: #f8f9fa;
        font-weight: bold;
    }

    td {
        font-size: 14px;
    }

    .btn {
        padding: 4px 10px;
        font-size: 14px;
    }

    .btn-primary {
        margin-right: 5px;
    }
</style>

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h4 class="mb-0">Member Details</h4>
        <a href="@Url.Action("_MemberAdd", "Member")" class="btn btn-primary">Add New</a>
    </div>

    <div class="card-body">
        <table class="table table-striped" id="memberTable">
            <thead>
                <tr>
                    <th>Member Type</th>
                    <th>Relationship</th>
                    <th>Member Name</th>
                    <th>Date Of Birth</th>
                    <th>Phone Number</th>
                    <th>Gender</th>
                    <th>Marital Status</th>
                    <th>Salary</th>
                    <th>Height (cm)</th>
                    <th>Weight (kg)</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Count; i++)
                {
                    <tr data-id="@Model[i].GmquotationMemberId">
                        <td>@Model[i].MemberType</td>
                        <td>@Model[i].Relation</td>
                        <td>@Model[i].FirstName</td>
                        <td>@(DateTime.TryParse(Model[i].DOB, out var dob) ? dob.ToString("MM/dd/yyyy") : Model[i].DOB)</td>
                        <td>@Model[i].MobileNumber</td>
                        <td>@Model[i].Gender</td>
                        <td>@Model[i].MaritalStatus</td>
                        <td>@Model[i].Salary</td>
                        <td>@Model[i].Height.ToString("F2")</td>
                        <td>@Model[i].Weight.ToString("F2")</td>
                        <td>
                            <a href="@Url.Action("_MemberEdit", "Member", new { id = Model[i].GmquotationMemberId })" class="btn btn-primary">Edit</a>
                            <button type="button" class="btn btn-danger btn-remove" data-id="@Model[i].GmquotationMemberId">Remove</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Add click event listener for all "Remove" buttons
        document.querySelectorAll('.btn-remove').forEach(function (button) {
            button.addEventListener('click', async function () {
                const row = this.closest('tr');
                const memberId = this.getAttribute('data-id');

                // Confirm removal
                if (confirm('Are you sure you want to remove this member?')) {
                    try {
                        // Make an AJAX call to the server to remove the member
                        const response = await fetch(`/Member/RemoveMember?id=${memberId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-TOKEN': '@Html.AntiForgeryToken()' // Include CSRF token if needed
                            }
                        });

                        const data = await response.json();

                        if (response.ok && data.success) {
                            // Remove the row from the table
                            row.remove();
                            alert('Member removed successfully!');
                        } else {
                            alert('Error removing member: ' + (data.message || 'Unknown error.'));
                        }
                    } catch (error) {
                        console.error('Error:', error);
                        alert('Error removing member. Please try again later.');
                    }
                }
            });
        });
    });
</script>
